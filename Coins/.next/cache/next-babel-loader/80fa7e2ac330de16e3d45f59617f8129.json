{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(listReload),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(coinsListSaga);\n\nimport { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\nimport cloneDeep from 'lodash/cloneDeep';\nimport actions from './actions';\nimport { coinsAPI } from '../../helpers/api/coins';\nvar messages = {\n  errorListLoad: 'Loading Coins list failed'\n};\n\nfunction getStoreData(state) {\n  var Coins = state.Coins;\n  var _Bonuses = Bonuses,\n      typeBonuses = _Bonuses.Bonuses;\n  var UI = typeBonuses.get('UI');\n  return {\n    filter: typeBonuses.get('filter'),\n    sorting: Tables.get(tableType).sorting,\n    pagination: deriveTablePagination(tableType, state),\n    bonusData: typeBonuses.get('bonusData'),\n    bets: typeBonuses.get('bets'),\n    betID: UI.betID,\n    editMode: UI.editMode,\n    closeModal: UI.closeModal,\n    denominationKey: UI.denominationKey,\n    denominationValue: UI.denominationValue,\n    freeSpinType: UI.freeSpinType,\n    bonusType: UI.bonusType,\n    websiteID: App.get('websiteID')\n  };\n}\n\nfunction listReload() {\n  return _regeneratorRuntime.wrap(function listReload$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(actions.COINS_LIST_RELOAD, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return put(actions.uiRefresh({\n                      loading: true\n                    }));\n\n                  case 2:\n                    _context.prev = 2;\n                    _context.next = 5;\n                    return call(coinsAPI.coinsList);\n\n                  case 5:\n                    res = _context.sent;\n\n                    if (!(res && res.status === 200)) {\n                      _context.next = 9;\n                      break;\n                    }\n\n                    _context.next = 9;\n                    return put(actions.listRefresh(res.data.coins));\n\n                  case 9:\n                    ;\n                    _context.next = 16;\n                    break;\n\n                  case 12:\n                    _context.prev = 12;\n                    _context.t0 = _context[\"catch\"](2);\n                    alert(messages.errorListLoad, _context.t0);\n                    console.log(_context.t0);\n\n                  case 16:\n                    _context.next = 18;\n                    return put(actions.uiRefresh({\n                      loading: false\n                    }));\n\n                  case 18:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[2, 12]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function coinsListSaga() {\n  return _regeneratorRuntime.wrap(function coinsListSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(listReload)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/home/user/Desktop/CoinState/Coins/Redux/Coins/saga.js"],"names":["listReload","coinsListSaga","all","takeEvery","put","fork","call","select","cloneDeep","actions","coinsAPI","messages","errorListLoad","getStoreData","state","Coins","Bonuses","typeBonuses","UI","get","filter","sorting","Tables","tableType","pagination","deriveTablePagination","bonusData","bets","betID","editMode","closeModal","denominationKey","denominationValue","freeSpinType","bonusType","websiteID","App","COINS_LIST_RELOAD","uiRefresh","loading","coinsList","res","status","listRefresh","data","coins","alert","console","log"],"mappings":"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","sourcesContent":["import { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\nimport cloneDeep from 'lodash/cloneDeep';\nimport actions from './actions';\n\nimport { coinsAPI } from '../../helpers/api/coins';\n\nconst messages = {\n  errorListLoad : 'Loading Coins list failed',\n};\n\nfunction getStoreData(state) {\n  const { Coins } = state;\n  const { Bonuses : typeBonuses } = Bonuses;\n  const UI = typeBonuses.get('UI');\n\n  return {\n    filter            : typeBonuses.get('filter'),\n    sorting           : Tables.get(tableType).sorting,\n    pagination        : deriveTablePagination(tableType, state),\n    bonusData         : typeBonuses.get('bonusData'),\n    bets              : typeBonuses.get('bets'),\n    betID             : UI.betID,\n    editMode          : UI.editMode,\n    closeModal        : UI.closeModal,\n    denominationKey   : UI.denominationKey,\n    denominationValue : UI.denominationValue,\n    freeSpinType      : UI.freeSpinType,\n    bonusType         : UI.bonusType,\n    websiteID         : App.get('websiteID'),\n  };\n}\n\nfunction* listReload() {\n  yield takeEvery(actions.COINS_LIST_RELOAD, function* () {\n    yield put(actions.uiRefresh({ loading: true }));\n\n    try {\n      const res = yield call(coinsAPI.coinsList);\n      if (res && res.status === 200) {\n        yield put(actions.listRefresh(res.data.coins));\n      };\n    } catch (error) {\n      alert(messages.errorListLoad, error);\n      console.log(error);\n    }\n\n    yield put(actions.uiRefresh({ loading: false }));\n  });\n}\n\nexport default function* coinsListSaga() {\n  yield all([fork(listReload)]);\n}\n"]},"metadata":{},"sourceType":"module"}