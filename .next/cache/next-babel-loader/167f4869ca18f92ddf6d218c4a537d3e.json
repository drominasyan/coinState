{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\coinState\\\\Coins\\\\containers\\\\Coins\\\\List.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport coinsActions from '../../Redux/CoinsList/actions';\nimport coinsDetailsActions from '../../Redux/CoinDetails/actions';\nimport { columns } from './utils';\nimport PropTypes from 'prop-types';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport ListTable from '../../Components/ListTable';\n\nvar List = /*#__PURE__*/function (_React$Component) {\n  _inherits(List, _React$Component);\n\n  var _super = _createSuper(List);\n\n  function List() {\n    var _this;\n\n    _classCallCheck(this, List);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"loadMoreCoins\", function () {\n      var _this$props = _this.props,\n          listReload = _this$props.listReload,\n          uiRefresh = _this$props.uiRefresh,\n          UI = _this$props.UI;\n      var skip = UI.skip;\n      uiRefresh({\n        skip: skip + 1\n      });\n      listReload();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"listenToScroll\", function () {\n      if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n        _this.loadMoreCoins();\n      }\n    });\n\n    _this.state = {\n      favorits: []\n    };\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.login();\n      this.setState({\n        student: localStorage.getItem('student') || {},\n        token: localStorage.getItem('token') || \"\",\n        isLoggedIn: localStorage.getItem('student' == null) ? false : true\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('scroll', this.listenToScroll);\n      var _this$props2 = this.props,\n          listReload = _this$props2.listReload,\n          uiRefresh = _this$props2.uiRefresh;\n      var favorits = localStorage.getItem('favorits');\n\n      if (favorits) {\n        favorits = JSON.parse(favorits);\n      } else {\n        favorits = [];\n      }\n\n      this.setState({\n        favorits: favorits\n      }); // uiRefresh({favorits})\n\n      listReload();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          list = _this$props3.list,\n          UI = _this$props3.UI,\n          detailsUI = _this$props3.detailsUI,\n          uiRefresh = _this$props3.uiRefresh,\n          listReload = _this$props3.listReload;\n      var favorits = UI.favorits;\n      var localStorage; //On Server Side we don't have webApi(such as brouwser, So in here we need to check availability of browser)\n\n      if (true) {// localStorage = JSON.Parse(localStorage.getItem('favorits'));\n      }\n\n      var favoritsList = list.filter(function (item) {\n        return favorits.includes(item.id);\n      });\n      return __jsx(Tabs, {\n        defaultActiveKey: \"Coins\",\n        transition: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }, __jsx(Tab, {\n        eventKey: \"Coins\",\n        title: \"Coins\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, __jsx(ListTable, {\n        columns: columns,\n        list: list,\n        UI: UI,\n        listReload: listReload,\n        uiRefresh: uiRefresh,\n        showMore: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      })), __jsx(Tab, {\n        eventKey: \"favorites\",\n        title: \"Favorites\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, __jsx(ListTable, {\n        columns: columns,\n        list: favoritsList,\n        UI: UI,\n        listReload: listReload,\n        showMore: false,\n        uiRefresh: uiRefresh,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\n_defineProperty(List, \"propTypes\", {\n  list: PropTypes.array.isRequired,\n  UI: PropTypes.object.isRequired,\n  detailsUI: PropTypes.object.isRequired,\n  listReload: PropTypes.func.isRequired,\n  uiRefresh: PropTypes.func.isRequired\n});\n\nfunction mapStateToProps(state) {\n  var Coins = state.Coins,\n      CoinDetails = state.CoinDetails;\n  return {\n    list: Coins.get('list'),\n    UI: Coins.get('UI'),\n    detailsUI: CoinDetails.get('UI')\n  };\n}\n\nvar mapDispatchToProps = {\n  listReload: coinsActions.listReload,\n  uiRefresh: coinsActions.uiRefresh,\n  uiDetailsRefresh: coinsDetailsActions.uiRefresh\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/coinState/Coins/containers/Coins/List.js"],"names":["React","connect","coinsActions","coinsDetailsActions","columns","PropTypes","Tabs","Tab","ListTable","List","props","listReload","uiRefresh","UI","skip","window","innerHeight","document","documentElement","scrollTop","offsetHeight","loadMoreCoins","state","favorits","login","setState","student","localStorage","getItem","token","isLoggedIn","addEventListener","listenToScroll","JSON","parse","list","detailsUI","favoritsList","filter","item","includes","id","Component","array","isRequired","object","func","mapStateToProps","Coins","CoinDetails","get","mapDispatchToProps","uiDetailsRefresh"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport coinsActions from '../../Redux/CoinsList/actions'\r\nimport coinsDetailsActions from '../../Redux/CoinDetails/actions'\r\nimport {columns} from './utils'\r\nimport PropTypes from 'prop-types';\r\nimport { Tabs, Tab} from 'react-bootstrap'\r\nimport ListTable from '../../Components/ListTable'\r\n\r\nclass List extends React.Component {\r\n\r\n    static propTypes = {\r\n        list        : PropTypes.array.isRequired,\r\n        UI          : PropTypes.object.isRequired,\r\n        detailsUI   : PropTypes.object.isRequired,\r\n        listReload  : PropTypes.func.isRequired,\r\n        uiRefresh   : PropTypes.func.isRequired,\r\n    }\r\n\r\n    constructor() { \r\n        super()\r\n        this.state = {\r\n            favorits: [],\r\n        };\r\n      }\r\n\r\n   \r\n    componentDidMount() {\r\n        this.login();\r\n        this.setState({\r\n        student: localStorage.getItem('student') || {},\r\n        token: localStorage.getItem('token') || \"\",\r\n        isLoggedIn: (localStorage.getItem('student' == null)) ? false : true\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('scroll', this.listenToScroll);\r\n        const {listReload, uiRefresh} = this.props;\r\n        let favorits = localStorage.getItem('favorits');\r\n        if(favorits) {\r\n            favorits = JSON.parse(favorits);\r\n        } else {    \r\n            favorits = []\r\n        }\r\n        this.setState({favorits})\r\n        // uiRefresh({favorits})\r\n        listReload();\r\n    }\r\n\r\n    loadMoreCoins = () => {\r\n        const { listReload, uiRefresh, UI } = this.props;\r\n        const { skip } = UI;\r\n        uiRefresh({\r\n            skip : skip + 1, \r\n        })\r\n        listReload();\r\n    }\r\n\r\n    listenToScroll = () => {\r\n        if(window.innerHeight + document.documentElement.scrollTop\r\n            === document.documentElement.offsetHeight) {\r\n                this.loadMoreCoins();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { list, UI, detailsUI, uiRefresh, listReload } = this.props;\r\n        const { favorits } = UI;\r\n        let localStorage;\r\n        //On Server Side we don't have webApi(such as brouwser, So in here we need to check availability of browser)\r\n        if (typeof window !== 'undefined') {\r\n            // localStorage = JSON.Parse(localStorage.getItem('favorits'));\r\n        }\r\n        const favoritsList = list.filter(item => favorits.includes(item.id));\r\n        return (\r\n            <Tabs defaultActiveKey=\"Coins\" transition={false}>\r\n                <Tab eventKey=\"Coins\" title=\"Coins\">\r\n                    <ListTable \r\n                        columns={columns}\r\n                        list={list}\r\n                        UI={UI}\r\n                        listReload={listReload}\r\n                        uiRefresh={uiRefresh}\r\n                        showMore = {true}\r\n                    />\r\n                </Tab>\r\n                <Tab eventKey=\"favorites\" title=\"Favorites\">\r\n                    <ListTable \r\n                        columns={columns}\r\n                        list={favoritsList}\r\n                        UI={UI}\r\n                        listReload={listReload}\r\n                        showMore = {false}\r\n                        uiRefresh={uiRefresh}\r\n                    />\r\n                </Tab>\r\n            </Tabs>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { Coins, CoinDetails } = state;\r\n  return {\r\n    list  : Coins.get('list'),\r\n    UI    : Coins.get('UI'),\r\n    detailsUI : CoinDetails.get('UI'),\r\n  };\r\n}\r\nconst mapDispatchToProps = {\r\n  listReload : coinsActions.listReload,\r\n  uiRefresh  : coinsActions.uiRefresh,\r\n  uiDetailsRefresh  : coinsDetailsActions.uiRefresh,\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);"]},"metadata":{},"sourceType":"module"}