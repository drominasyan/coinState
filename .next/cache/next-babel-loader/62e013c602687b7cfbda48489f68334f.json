{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(dataReload),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(setFavorite),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(detailsSagas);\n\nimport { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\nimport actions from './actions';\nimport { coinsAPI } from '../../helpers/api/coins';\nvar messages = {\n  errorListLoad: 'Loading Coin Details list failed'\n}; // function getStoreData(state) {\n//   const { CoinDetails } = state;\n//   const UI = CoinDetails.get('UI');\n//   const { id } = UI;\n//   return {\n//     id,\n//   };\n// }\n\nfunction dataReload() {\n  return _regeneratorRuntime.wrap(function dataReload$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(actions.BASE_DATA_RELOAD, /*#__PURE__*/_regeneratorRuntime.mark(function _callee(action) {\n            var id, res;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    id = action.data.id;\n                    _context.next = 3;\n                    return put(actions.uiRefresh({\n                      loading: true\n                    }));\n\n                  case 3:\n                    _context.prev = 3;\n                    _context.next = 6;\n                    return call(coinsAPI.coinDetails, id);\n\n                  case 6:\n                    res = _context.sent;\n\n                    if (!(res && res.status === 200)) {\n                      _context.next = 10;\n                      break;\n                    }\n\n                    _context.next = 10;\n                    return put(actions.baseDataRefrash(res.data.coin));\n\n                  case 10:\n                    ;\n                    _context.next = 17;\n                    break;\n\n                  case 13:\n                    _context.prev = 13;\n                    _context.t0 = _context[\"catch\"](3);\n                    alert(messages.errorListLoad, _context.t0);\n                    console.log(_context.t0);\n\n                  case 17:\n                    _context.next = 19;\n                    return put(actions.uiRefresh({\n                      loading: false\n                    }));\n\n                  case 19:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[3, 13]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction setFavorite() {\n  return _regeneratorRuntime.wrap(function setFavorite$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(actions.SET, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(action) {\n            var id, res;\n            return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    id = action.data.id;\n                    _context3.next = 3;\n                    return put(actions.uiRefresh({\n                      loading: true\n                    }));\n\n                  case 3:\n                    _context3.prev = 3;\n                    _context3.next = 6;\n                    return call(coinsAPI.coinDetails, id);\n\n                  case 6:\n                    res = _context3.sent;\n\n                    if (!(res && res.status === 200)) {\n                      _context3.next = 10;\n                      break;\n                    }\n\n                    _context3.next = 10;\n                    return put(actions.baseDataRefrash(res.data.coin));\n\n                  case 10:\n                    ;\n                    _context3.next = 17;\n                    break;\n\n                  case 13:\n                    _context3.prev = 13;\n                    _context3.t0 = _context3[\"catch\"](3);\n                    alert(messages.errorListLoad, _context3.t0);\n                    console.log(_context3.t0);\n\n                  case 17:\n                    _context3.next = 19;\n                    return put(actions.uiRefresh({\n                      loading: false\n                    }));\n\n                  case 19:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee2, null, [[3, 13]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function detailsSagas() {\n  return _regeneratorRuntime.wrap(function detailsSagas$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(dataReload)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/coinState/Coins/Redux/CoinDetails/saga.js"],"names":["dataReload","setFavorite","detailsSagas","all","takeEvery","put","fork","call","select","actions","coinsAPI","messages","errorListLoad","BASE_DATA_RELOAD","action","id","data","uiRefresh","loading","coinDetails","res","status","baseDataRefrash","coin","alert","console","log","SET"],"mappings":"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","sourcesContent":["import { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\r\nimport actions from './actions';\r\n\r\nimport { coinsAPI } from '../../helpers/api/coins';\r\n\r\nconst messages = {\r\n  errorListLoad : 'Loading Coin Details list failed',\r\n};\r\n\r\n// function getStoreData(state) {\r\n//   const { CoinDetails } = state;\r\n//   const UI = CoinDetails.get('UI');\r\n//   const { id } = UI;\r\n//   return {\r\n//     id,\r\n//   };\r\n// }\r\n\r\nfunction* dataReload() {\r\n  yield takeEvery(actions.BASE_DATA_RELOAD, function* (action) {\r\n    const {id} = action.data\r\n    yield put(actions.uiRefresh({ loading: true }));\r\n    \r\n    try {\r\n      const res = yield call(coinsAPI.coinDetails, id);\r\n      if (res && res.status === 200) {\r\n        yield put(actions.baseDataRefrash(res.data.coin));\r\n      };\r\n    } catch (error) {\r\n      alert(messages.errorListLoad, error);\r\n      console.log(error);\r\n    }\r\n\r\n    yield put(actions.uiRefresh({ loading: false }));\r\n  });\r\n}\r\n\r\nfunction* setFavorite() {\r\n  yield takeEvery(actions.SET, function* (action) {\r\n    const {id} = action.data\r\n    yield put(actions.uiRefresh({ loading: true }));\r\n    \r\n    try {\r\n      const res = yield call(coinsAPI.coinDetails, id);\r\n      if (res && res.status === 200) {\r\n        yield put(actions.baseDataRefrash(res.data.coin));\r\n      };\r\n    } catch (error) {\r\n      alert(messages.errorListLoad, error);\r\n      console.log(error);\r\n    }\r\n\r\n    yield put(actions.uiRefresh({ loading: false }));\r\n  });\r\n}\r\n\r\nexport default function* detailsSagas() {\r\n  yield all([fork(dataReload)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}