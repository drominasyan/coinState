{"ast":null,"code":"import { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\nimport cloneDeep from 'lodash/cloneDeep';\nimport actions from './actions';\nimport { coinsAPI } from '../../helpers/api/coins';\nconst messages = {\n  errorListLoad: 'Loading Coins list failed'\n};\n\nfunction getStoreData(state) {\n  const {\n    Coins\n  } = state;\n  const {\n    Bonuses: typeBonuses\n  } = Bonuses;\n  const UI = typeBonuses.get('UI');\n  return {\n    filter: typeBonuses.get('filter'),\n    sorting: Tables.get(tableType).sorting,\n    pagination: deriveTablePagination(tableType, state),\n    bonusData: typeBonuses.get('bonusData'),\n    bets: typeBonuses.get('bets'),\n    betID: UI.betID,\n    editMode: UI.editMode,\n    closeModal: UI.closeModal,\n    denominationKey: UI.denominationKey,\n    denominationValue: UI.denominationValue,\n    freeSpinType: UI.freeSpinType,\n    bonusType: UI.bonusType,\n    websiteID: App.get('websiteID')\n  };\n}\n\nfunction* listReload() {\n  yield takeEvery(actions.COINS_LIST_RELOAD, function* () {\n    yield put(actions.uiRefresh({\n      loading: true\n    }));\n\n    try {\n      const res = yield call(coinsAPI.coinsList);\n\n      if (res && res.status === 200) {\n        yield put(actions.listRefresh(res.data.coins));\n      }\n\n      ;\n    } catch (error) {\n      alert(messages.errorListLoad, error);\n      console.log(error);\n    }\n\n    yield put(actions.uiRefresh({\n      loading: false\n    }));\n  });\n}\n\nexport default function* coinsListSaga() {\n  yield all([fork(listReload)]);\n}","map":{"version":3,"sources":["/home/user/Desktop/CoinState/Coins/Redux/Coins/saga.js"],"names":["all","takeEvery","put","fork","call","select","cloneDeep","actions","coinsAPI","messages","errorListLoad","getStoreData","state","Coins","Bonuses","typeBonuses","UI","get","filter","sorting","Tables","tableType","pagination","deriveTablePagination","bonusData","bets","betID","editMode","closeModal","denominationKey","denominationValue","freeSpinType","bonusType","websiteID","App","listReload","COINS_LIST_RELOAD","uiRefresh","loading","res","coinsList","status","listRefresh","data","coins","error","alert","console","log","coinsListSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,MAA1C,QAAwD,oBAAxD;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,SAASC,QAAT,QAAyB,yBAAzB;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,aAAa,EAAG;AADD,CAAjB;;AAIA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AACA,QAAM;AAAEE,IAAAA,OAAO,EAAGC;AAAZ,MAA4BD,OAAlC;AACA,QAAME,EAAE,GAAGD,WAAW,CAACE,GAAZ,CAAgB,IAAhB,CAAX;AAEA,SAAO;AACLC,IAAAA,MAAM,EAAcH,WAAW,CAACE,GAAZ,CAAgB,QAAhB,CADf;AAELE,IAAAA,OAAO,EAAaC,MAAM,CAACH,GAAP,CAAWI,SAAX,EAAsBF,OAFrC;AAGLG,IAAAA,UAAU,EAAUC,qBAAqB,CAACF,SAAD,EAAYT,KAAZ,CAHpC;AAILY,IAAAA,SAAS,EAAWT,WAAW,CAACE,GAAZ,CAAgB,WAAhB,CAJf;AAKLQ,IAAAA,IAAI,EAAgBV,WAAW,CAACE,GAAZ,CAAgB,MAAhB,CALf;AAMLS,IAAAA,KAAK,EAAeV,EAAE,CAACU,KANlB;AAOLC,IAAAA,QAAQ,EAAYX,EAAE,CAACW,QAPlB;AAQLC,IAAAA,UAAU,EAAUZ,EAAE,CAACY,UARlB;AASLC,IAAAA,eAAe,EAAKb,EAAE,CAACa,eATlB;AAULC,IAAAA,iBAAiB,EAAGd,EAAE,CAACc,iBAVlB;AAWLC,IAAAA,YAAY,EAAQf,EAAE,CAACe,YAXlB;AAYLC,IAAAA,SAAS,EAAWhB,EAAE,CAACgB,SAZlB;AAaLC,IAAAA,SAAS,EAAWC,GAAG,CAACjB,GAAJ,CAAQ,WAAR;AAbf,GAAP;AAeD;;AAED,UAAUkB,UAAV,GAAuB;AACrB,QAAMlC,SAAS,CAACM,OAAO,CAAC6B,iBAAT,EAA4B,aAAa;AACtD,UAAMlC,GAAG,CAACK,OAAO,CAAC8B,SAAR,CAAkB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAlB,CAAD,CAAT;;AAEA,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMnC,IAAI,CAACI,QAAQ,CAACgC,SAAV,CAAtB;;AACA,UAAID,GAAG,IAAIA,GAAG,CAACE,MAAJ,KAAe,GAA1B,EAA+B;AAC7B,cAAMvC,GAAG,CAACK,OAAO,CAACmC,WAAR,CAAoBH,GAAG,CAACI,IAAJ,CAASC,KAA7B,CAAD,CAAT;AACD;;AAAA;AACF,KALD,CAKE,OAAOC,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACrC,QAAQ,CAACC,aAAV,EAAyBmC,KAAzB,CAAL;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD;;AAED,UAAM3C,GAAG,CAACK,OAAO,CAAC8B,SAAR,CAAkB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAlB,CAAD,CAAT;AACD,GAdc,CAAf;AAeD;;AAED,eAAe,UAAUW,aAAV,GAA0B;AACvC,QAAMjD,GAAG,CAAC,CAACG,IAAI,CAACgC,UAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\nimport cloneDeep from 'lodash/cloneDeep';\nimport actions from './actions';\n\nimport { coinsAPI } from '../../helpers/api/coins';\n\nconst messages = {\n  errorListLoad : 'Loading Coins list failed',\n};\n\nfunction getStoreData(state) {\n  const { Coins } = state;\n  const { Bonuses : typeBonuses } = Bonuses;\n  const UI = typeBonuses.get('UI');\n\n  return {\n    filter            : typeBonuses.get('filter'),\n    sorting           : Tables.get(tableType).sorting,\n    pagination        : deriveTablePagination(tableType, state),\n    bonusData         : typeBonuses.get('bonusData'),\n    bets              : typeBonuses.get('bets'),\n    betID             : UI.betID,\n    editMode          : UI.editMode,\n    closeModal        : UI.closeModal,\n    denominationKey   : UI.denominationKey,\n    denominationValue : UI.denominationValue,\n    freeSpinType      : UI.freeSpinType,\n    bonusType         : UI.bonusType,\n    websiteID         : App.get('websiteID'),\n  };\n}\n\nfunction* listReload() {\n  yield takeEvery(actions.COINS_LIST_RELOAD, function* () {\n    yield put(actions.uiRefresh({ loading: true }));\n\n    try {\n      const res = yield call(coinsAPI.coinsList);\n      if (res && res.status === 200) {\n        yield put(actions.listRefresh(res.data.coins));\n      };\n    } catch (error) {\n      alert(messages.errorListLoad, error);\n      console.log(error);\n    }\n\n    yield put(actions.uiRefresh({ loading: false }));\n  });\n}\n\nexport default function* coinsListSaga() {\n  yield all([fork(listReload)]);\n}\n"]},"metadata":{},"sourceType":"module"}