{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/user/Desktop/CoinState/Coins/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport coinsActions from '../Redux/Coins/actions';\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props); //Initialise state\n\n    _defineProperty(_assertThisInitialized(_this), \"incrementCounter\", function () {\n      _this.setState(function (prevState) {\n        _this.setState({\n          counter: prevState.counter + 1.\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"decrementCounter\", function () {\n      _this.setState(function (prevState) {\n        _this.setState({\n          counter: prevState.counter - 1.\n        });\n      });\n    });\n\n    _this.state = {\n      counter: 0\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentdidmount\",\n    value: function componentdidmount() {\n      var listReload = this.props.listReload;\n      listReload();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      }, __jsx(\"button\", {\n        onClick: this.incrementCounter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, \"Increment\"), __jsx(\"button\", {\n        onClick: this.decrementCounter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }, \"Decrement\"), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }, this.state.counter));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var store = _ref.store,\n          isServer = _ref.isServer,\n          pathname = _ref.pathname,\n          query = _ref.query;\n      // component will be able to read from store's state when rendered\n      // store.dispatch({ type: 'FOO', payload: 'foo' });\n      // you can pass some custom props to component from here\n      return {\n        custom: 'custom'\n      };\n    } //Updates the counter in state by +1\n\n  }]);\n\n  return App;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  var _deriveLanguage = deriveLanguage(state),\n      locale = _deriveLanguage.locale;\n\n  var _deriveTheme = deriveTheme(state),\n      themeName = _deriveTheme.themeName;\n\n  return {\n    locale: locale,\n    selectedTheme: themeName,\n    idToken: deriveToken(state),\n    activeTabTitle: deriveActiveTabTitle(state),\n    notificationsCount: deriveAllNotificationsCount(state)\n  };\n}\n\nvar mapDispatchToProps = {\n  listReload: coinsActions.listReload\n};\nexport default connect(function (state) {\n  return state;\n})(App);","map":{"version":3,"sources":["/home/user/Desktop/CoinState/Coins/pages/index.js"],"names":["React","connect","coinsActions","App","props","setState","prevState","counter","state","listReload","incrementCounter","decrementCounter","store","isServer","pathname","query","custom","Component","mapStateToProps","deriveLanguage","locale","deriveTheme","themeName","selectedTheme","idToken","deriveToken","activeTabTitle","deriveActiveTabTitle","notificationsCount","deriveAllNotificationsCount","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;IACMC,G;;;;;AAEF,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN,EADe,CAGf;;AAHe,uEAsBA,YAAM;AACrB,YAAKC,QAAL,CAAc,UAAAC,SAAS,EAAI;AACvB,cAAKD,QAAL,CAAc;AACVE,UAAAA,OAAO,EAAED,SAAS,CAACC,OAAV,GAAoB;AADnB,SAAd;AAGH,OAJD;AAKH,KA5BkB;;AAAA,uEA+BA,YAAM;AACrB,YAAKF,QAAL,CAAc,UAAAC,SAAS,EAAI;AACvB,cAAKD,QAAL,CAAc;AACVE,UAAAA,OAAO,EAAED,SAAS,CAACC,OAAV,GAAoB;AADnB,SAAd;AAGH,OAJD;AAKH,KArCkB;;AAIf,UAAKC,KAAL,GAAa;AACTD,MAAAA,OAAO,EAAE;AADA,KAAb;AAJe;AAOlB;;;;wCAEkB;AAAA,UACRE,UADQ,GACM,KAAKL,KADX,CACRK,UADQ;AAEfA,MAAAA,UAAU;AACb;;;6BA2BQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,OAAO,EAAE,KAAKC,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI;AAAQ,QAAA,OAAO,EAAE,KAAKC,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKH,KAAL,CAAWD,OAAhB,CAHJ,CADJ;AAOH;;;0CAjC4D;AAAA,UAApCK,KAAoC,QAApCA,KAAoC;AAAA,UAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,UAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,UAATC,KAAS,QAATA,KAAS;AACzD;AACA;AACA;AACA,aAAO;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAP;AACH,K,CAED;;;;;EAvBchB,KAAK,CAACiB,S;;AAoDxB,SAASC,eAAT,CAAyBV,KAAzB,EAAgC;AAAA,wBACXW,cAAc,CAACX,KAAD,CADH;AAAA,MACtBY,MADsB,mBACtBA,MADsB;;AAAA,qBAERC,WAAW,CAACb,KAAD,CAFH;AAAA,MAEtBc,SAFsB,gBAEtBA,SAFsB;;AAI9B,SAAO;AACLF,IAAAA,MAAM,EAANA,MADK;AAELG,IAAAA,aAAa,EAAQD,SAFhB;AAGLE,IAAAA,OAAO,EAAcC,WAAW,CAACjB,KAAD,CAH3B;AAILkB,IAAAA,cAAc,EAAOC,oBAAoB,CAACnB,KAAD,CAJpC;AAKLoB,IAAAA,kBAAkB,EAAGC,2BAA2B,CAACrB,KAAD;AAL3C,GAAP;AAOD;;AACD,IAAMsB,kBAAkB,GAAG;AACzBrB,EAAAA,UAAU,EAAGP,YAAY,CAACO;AADD,CAA3B;AAGA,eAAeR,OAAO,CAAC,UAAAO,KAAK;AAAA,SAAIA,KAAJ;AAAA,CAAN,CAAP,CAAwBL,GAAxB,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport coinsActions from '../Redux/Coins/actions'\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        //Initialise state\n        this.state = {\n            counter: 0\n        };\n    }\n\n    componentdidmount(){\n        const {listReload} = this.props;\n        listReload();\n    }\n\n    static getInitialProps({ store, isServer, pathname, query }) {\n        // component will be able to read from store's state when rendered\n        // store.dispatch({ type: 'FOO', payload: 'foo' });\n        // you can pass some custom props to component from here\n        return { custom: 'custom' };\n    }\n\n    //Updates the counter in state by +1\n    incrementCounter = () => {\n        this.setState(prevState => {\n            this.setState({\n                counter: prevState.counter + 1.\n            });\n        });\n    };\n\n    //Updates the counter in state by  -1\n    decrementCounter = () => {\n        this.setState(prevState => {\n            this.setState({\n                counter: prevState.counter - 1.\n            });\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.incrementCounter}>Increment</button>\n                <button onClick={this.decrementCounter}>Decrement</button>\n                <h1>{this.state.counter}</h1>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n  const { locale } = deriveLanguage(state);\n  const { themeName } = deriveTheme(state);\n\n  return {\n    locale,\n    selectedTheme      : themeName,\n    idToken            : deriveToken(state),\n    activeTabTitle     : deriveActiveTabTitle(state),\n    notificationsCount : deriveAllNotificationsCount(state),\n  };\n}\nconst mapDispatchToProps = {\n  listReload : coinsActions.listReload,\n}\nexport default connect(state => state)(App);"]},"metadata":{},"sourceType":"module"}