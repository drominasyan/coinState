{"ast":null,"code":"import { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\nimport actions from './actions';\nimport { coinsAPI } from '../../helpers/api/coins';\nconst messages = {\n  errorListLoad: 'Loading Coin Details list failed'\n}; // function getStoreData(state) {\n//   const { CoinDetails } = state;\n//   const UI = CoinDetails.get('UI');\n//   const { id } = UI;\n//   return {\n//     id,\n//   };\n// }\n\nfunction* dataReload() {\n  yield takeEvery(actions.BASE_DATA_RELOAD, function* (action) {\n    const {\n      id\n    } = action.data;\n    yield put(actions.uiRefresh({\n      loading: true\n    }));\n\n    try {\n      const res = yield call(coinsAPI.coinDetails, id);\n\n      if (res && res.status === 200) {\n        yield put(actions.baseDataRefrash(res.data.coin));\n      }\n\n      ;\n    } catch (error) {\n      alert(messages.errorListLoad, error);\n      console.log(error);\n    }\n\n    yield put(actions.uiRefresh({\n      loading: false\n    }));\n  });\n}\n\nfunction* setFavorite() {\n  yield takeEvery(actions.SET_FAVORITE, function* (action) {\n    const {\n      id\n    } = action.data;\n    let favorits = localStorage.getItem(\"favorits\") || [];\n\n    if (favorits.length) {\n      const haveFavorits = favorits.includes(id);\n\n      if (haveFavorits) {\n        favorits.push(id);\n      }\n    } else {\n      favorits = localStorage.setItem(\"favorits\", [id]); //  = []\n    }\n\n    yield put(actions.uiRefresh({\n      favorits\n    }));\n  });\n}\n\nexport default function* detailsSagas() {\n  yield all([fork(dataReload), fork(setFavorite)]);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/coinState/Coins/Redux/CoinDetails/saga.js"],"names":["all","takeEvery","put","fork","call","select","actions","coinsAPI","messages","errorListLoad","dataReload","BASE_DATA_RELOAD","action","id","data","uiRefresh","loading","res","coinDetails","status","baseDataRefrash","coin","error","alert","console","log","setFavorite","SET_FAVORITE","favorits","localStorage","getItem","length","haveFavorits","includes","push","setItem","detailsSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,MAA1C,QAAwD,oBAAxD;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,SAASC,QAAT,QAAyB,yBAAzB;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,aAAa,EAAG;AADD,CAAjB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAUC,UAAV,GAAuB;AACrB,QAAMT,SAAS,CAACK,OAAO,CAACK,gBAAT,EAA2B,WAAWC,MAAX,EAAmB;AAC3D,UAAM;AAACC,MAAAA;AAAD,QAAOD,MAAM,CAACE,IAApB;AACA,UAAMZ,GAAG,CAACI,OAAO,CAACS,SAAR,CAAkB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAlB,CAAD,CAAT;;AAEA,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMb,IAAI,CAACG,QAAQ,CAACW,WAAV,EAAuBL,EAAvB,CAAtB;;AACA,UAAII,GAAG,IAAIA,GAAG,CAACE,MAAJ,KAAe,GAA1B,EAA+B;AAC7B,cAAMjB,GAAG,CAACI,OAAO,CAACc,eAAR,CAAwBH,GAAG,CAACH,IAAJ,CAASO,IAAjC,CAAD,CAAT;AACD;;AAAA;AACF,KALD,CAKE,OAAOC,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACf,QAAQ,CAACC,aAAV,EAAyBa,KAAzB,CAAL;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD;;AAED,UAAMpB,GAAG,CAACI,OAAO,CAACS,SAAR,CAAkB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAlB,CAAD,CAAT;AACD,GAfc,CAAf;AAgBD;;AAED,UAAUU,WAAV,GAAwB;AACtB,QAAMzB,SAAS,CAACK,OAAO,CAACqB,YAAT,EAAuB,WAAWf,MAAX,EAAmB;AACvD,UAAM;AAACC,MAAAA;AAAD,QAAOD,MAAM,CAACE,IAApB;AAEA,QAAIc,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,KAAoC,EAAnD;;AACA,QAAIF,QAAQ,CAACG,MAAb,EAAqB;AACnB,YAAMC,YAAY,GAAGJ,QAAQ,CAACK,QAAT,CAAkBpB,EAAlB,CAArB;;AACA,UAAGmB,YAAH,EAAiB;AAEfJ,QAAAA,QAAQ,CAACM,IAAT,CAAcrB,EAAd;AACD;AACF,KAND,MAMO;AACLe,MAAAA,QAAQ,GAAGC,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiC,CAACtB,EAAD,CAAjC,CAAX,CADK,CAEL;AACD;;AAED,UAAMX,GAAG,CAACI,OAAO,CAACS,SAAR,CAAkB;AAAEa,MAAAA;AAAF,KAAlB,CAAD,CAAT;AACD,GAhBc,CAAf;AAiBD;;AAED,eAAe,UAAUQ,YAAV,GAAyB;AACtC,QAAMpC,GAAG,CAAC,CACRG,IAAI,CAACO,UAAD,CADI,EAERP,IAAI,CAACuB,WAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\r\nimport actions from './actions';\r\n\r\nimport { coinsAPI } from '../../helpers/api/coins';\r\n\r\nconst messages = {\r\n  errorListLoad : 'Loading Coin Details list failed',\r\n};\r\n\r\n// function getStoreData(state) {\r\n//   const { CoinDetails } = state;\r\n//   const UI = CoinDetails.get('UI');\r\n//   const { id } = UI;\r\n//   return {\r\n//     id,\r\n//   };\r\n// }\r\n\r\nfunction* dataReload() {\r\n  yield takeEvery(actions.BASE_DATA_RELOAD, function* (action) {\r\n    const {id} = action.data\r\n    yield put(actions.uiRefresh({ loading: true }));\r\n    \r\n    try {\r\n      const res = yield call(coinsAPI.coinDetails, id);\r\n      if (res && res.status === 200) {\r\n        yield put(actions.baseDataRefrash(res.data.coin));\r\n      };\r\n    } catch (error) {\r\n      alert(messages.errorListLoad, error);\r\n      console.log(error);\r\n    }\r\n\r\n    yield put(actions.uiRefresh({ loading: false }));\r\n  });\r\n}\r\n\r\nfunction* setFavorite() {\r\n  yield takeEvery(actions.SET_FAVORITE, function* (action) {\r\n    const {id} = action.data\r\n    \r\n    let favorits = localStorage.getItem(\"favorits\") || [];\r\n    if (favorits.length) {\r\n      const haveFavorits = favorits.includes(id);\r\n      if(haveFavorits) {\r\n        \r\n        favorits.push(id)\r\n      }\r\n    } else {\r\n      favorits = localStorage.setItem(\"favorits\", [id]);\r\n      //  = []\r\n    }\r\n\r\n    yield put(actions.uiRefresh({ favorits }));\r\n  });\r\n}\r\n\r\nexport default function* detailsSagas() {\r\n  yield all([\r\n    fork(dataReload), \r\n    fork(setFavorite)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}