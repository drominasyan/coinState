{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\coinState\\\\Coins\\\\containers\\\\Coins\\\\List.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport coinsActions from '../../Redux/CoinsList/actions';\nimport coinsDetailsActions from '../../Redux/CoinDetails/actions';\nimport { columns } from './utils';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { starFull } from 'react-icons-kit/icomoon/starFull';\nimport { Icon } from 'react-icons-kit';\nimport { Tabs, Tab, Spinner } from 'react-bootstrap';\nimport { addFavoritList } from '../../helpers/utils';\nimport ListTable from '../../Components/ListTable';\n\nvar List = /*#__PURE__*/function (_React$Component) {\n  _inherits(List, _React$Component);\n\n  var _super = _createSuper(List);\n\n  function List() {\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"listenToScroll\", function () {\n      if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n        _this.loadMoreCoins();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"loadMoreCoins\", function () {\n      var _this$props = _this.props,\n          listReload = _this$props.listReload,\n          uiRefresh = _this$props.uiRefresh,\n          UI = _this$props.UI;\n      var skip = UI.skip;\n      uiRefresh({\n        skip: skip + 1\n      });\n      listReload();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderValue\", function (columnItem, listItem, index) {\n      var _this$props2 = _this.props,\n          UI = _this$props2.UI,\n          uiRefresh = _this$props2.uiRefresh;\n      var favorits = UI.favorits,\n          listReload = UI.listReload;\n      var liked = favorits.includes(listItem.id) ? 'active' : 'inactive';\n\n      switch (columnItem.dataIndex) {\n        case 'id':\n          return index + 1;\n\n        case 'name':\n          return __jsx(React.Fragment, null, __jsx(\"div\", {\n            className: \"starList \".concat(liked),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }\n          }, __jsx(Icon, {\n            icon: starFull,\n            size: 20,\n            onClick: function onClick() {\n              return _this.addFavoritList(listItem.id);\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }\n          })), __jsx(Link, {\n            href: \"/coins/\".concat(listItem.id),\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }\n          }, __jsx(\"a\", {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 33\n            }\n          }, __jsx(\"img\", {\n            src: listItem.icon,\n            className: \"coinIcon\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 37\n            }\n          }), listItem[columnItem.dataIndex])));\n\n        default:\n          return listItem[columnItem.dataIndex];\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addFavoritList\", function (id) {\n      var uiRefresh = _this.props.uiRefresh;\n      var favorits = addFavoritList(id);\n      uiRefresh({\n        favorits: favorits\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('scroll', this.listenToScroll);\n      var _this$props3 = this.props,\n          listReload = _this$props3.listReload,\n          uiRefresh = _this$props3.uiRefresh;\n      var favorits = localStorage.getItem('favorits');\n\n      if (favorits) {\n        favorits = JSON.parse(favorits);\n      } else {\n        favorits = [];\n      }\n\n      uiRefresh({\n        favorits: favorits\n      });\n      listReload();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          list = _this$props4.list,\n          UI = _this$props4.UI,\n          detailsUI = _this$props4.detailsUI;\n      var loading = UI.loading,\n          favorits = UI.favorits;\n      var favoritsList = list.filter(function (item) {\n        return favorits.includes(item.id);\n      }); // console.log(favoritsList);\n\n      return __jsx(Tabs, {\n        defaultActiveKey: \"Coins\",\n        transition: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, __jsx(Tab, {\n        eventKey: \"Coins\",\n        title: \"Coins\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, __jsx(ListTable, {\n        columns: columns,\n        list: list,\n        UI: UI,\n        listReload: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      })), __jsx(Tab, {\n        eventKey: \"favorites\",\n        title: \"Favorites\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps() {}\n  }]);\n\n  return List;\n}(React.Component);\n\n_defineProperty(List, \"propTypes\", {\n  list: PropTypes.array.isRequired,\n  UI: PropTypes.object.isRequired,\n  detailsUI: PropTypes.object.isRequired,\n  listReload: PropTypes.func.isRequired,\n  uiRefresh: PropTypes.func.isRequired\n});\n\nfunction mapStateToProps(state) {\n  var Coins = state.Coins,\n      CoinDetails = state.CoinDetails;\n  return {\n    list: Coins.get('list'),\n    UI: Coins.get('UI'),\n    detailsUI: CoinDetails.get('UI')\n  };\n}\n\nvar mapDispatchToProps = {\n  listReload: coinsActions.listReload,\n  uiRefresh: coinsActions.uiRefresh,\n  uiDetailsRefresh: coinsDetailsActions.uiRefresh\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/coinState/Coins/containers/Coins/List.js"],"names":["React","connect","coinsActions","coinsDetailsActions","columns","PropTypes","Link","starFull","Icon","Tabs","Tab","Spinner","addFavoritList","ListTable","List","window","innerHeight","document","documentElement","scrollTop","offsetHeight","loadMoreCoins","props","listReload","uiRefresh","UI","skip","columnItem","listItem","index","favorits","liked","includes","id","dataIndex","icon","addEventListener","listenToScroll","localStorage","getItem","JSON","parse","list","detailsUI","loading","favoritsList","filter","item","Component","array","isRequired","object","func","mapStateToProps","state","Coins","CoinDetails","get","mapDispatchToProps","uiDetailsRefresh"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,SAAQC,OAAR,QAAsB,SAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,QAAR,QAAuB,kCAAvB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,OAApB,QAAkC,iBAAlC;AACA,SAAQC,cAAR,QAA6B,qBAA7B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;IAEMC,I;;;;;;;;;;;;;;;;qEAyBe,YAAM;AACnB,UAAGC,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACKF,QAAQ,CAACC,eAAT,CAAyBE,YADjC,EAC+C;AACvC,cAAKC,aAAL;AACP;AACF,K;;oEAEa,YAAM;AAAA,wBACoB,MAAKC,KADzB;AAAA,UACVC,UADU,eACVA,UADU;AAAA,UACEC,SADF,eACEA,SADF;AAAA,UACaC,EADb,eACaA,EADb;AAAA,UAEVC,IAFU,GAEDD,EAFC,CAEVC,IAFU;AAGlBF,MAAAA,SAAS,CAAC;AACNE,QAAAA,IAAI,EAAGA,IAAI,GAAG;AADR,OAAD,CAAT;AAGAH,MAAAA,UAAU;AACb,K;;kEACa,UAACI,UAAD,EAAaC,QAAb,EAAuBC,KAAvB,EAAiC;AAAA,yBACnB,MAAKP,KADc;AAAA,UACpCG,EADoC,gBACpCA,EADoC;AAAA,UAChCD,SADgC,gBAChCA,SADgC;AAAA,UAEnCM,QAFmC,GAEVL,EAFU,CAEnCK,QAFmC;AAAA,UAEzBP,UAFyB,GAEVE,EAFU,CAEzBF,UAFyB;AAG3C,UAAIQ,KAAK,GAAGD,QAAQ,CAACE,QAAT,CAAkBJ,QAAQ,CAACK,EAA3B,IAAiC,QAAjC,GAA4C,UAAxD;;AACA,cAAQN,UAAU,CAACO,SAAnB;AACI,aAAK,IAAL;AACI,iBAAOL,KAAK,GAAG,CAAf;;AACJ,aAAK,MAAL;AACI,iBAAO,4BACK;AAAK,YAAA,SAAS,qBAAgBE,KAAhB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,MAAC,IAAD;AAAM,YAAA,IAAI,EAAExB,QAAZ;AAAsB,YAAA,IAAI,EAAE,EAA5B;AAAgC,YAAA,OAAO,EAAE;AAAA,qBAAK,MAAKK,cAAL,CAAoBgB,QAAQ,CAACK,EAA7B,CAAL;AAAA,aAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADL,EAIK,MAAC,IAAD;AAAM,YAAA,IAAI,mBAAYL,QAAQ,CAACK,EAArB,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAK,YAAA,GAAG,EAAEL,QAAQ,CAACO,IAAnB;AAAyB,YAAA,SAAS,EAAG,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKP,QAAQ,CAACD,UAAU,CAACO,SAAZ,CAFb,CADJ,CAJL,CAAP;;AAWJ;AACA,iBAAON,QAAQ,CAACD,UAAU,CAACO,SAAZ,CAAf;AAhBJ;AAkBH,K;;qEAEgB,UAACD,EAAD,EAAQ;AAAA,UACbT,SADa,GACA,MAAKF,KADL,CACbE,SADa;AAErB,UAAMM,QAAQ,GAAGlB,cAAc,CAACqB,EAAD,CAA/B;AACAT,MAAAA,SAAS,CAAE;AAACM,QAAAA,QAAQ,EAARA;AAAD,OAAF,CAAT;AACH,K;;;;;;;wCAxDkB;AACff,MAAAA,MAAM,CAACqB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,cAAvC;AADe,yBAEiB,KAAKf,KAFtB;AAAA,UAERC,UAFQ,gBAERA,UAFQ;AAAA,UAEIC,SAFJ,gBAEIA,SAFJ;AAGf,UAAIM,QAAQ,GAAGQ,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAf;;AACA,UAAGT,QAAH,EAAa;AACTA,QAAAA,QAAQ,GAAGU,IAAI,CAACC,KAAL,CAAWX,QAAX,CAAX;AACH,OAFD,MAEO;AACHA,QAAAA,QAAQ,GAAG,EAAX;AACH;;AACDN,MAAAA,SAAS,CAAC;AAACM,QAAAA,QAAQ,EAARA;AAAD,OAAD,CAAT;AACAP,MAAAA,UAAU;AACb;;;6BA+CQ;AAAA,yBAC2B,KAAKD,KADhC;AAAA,UACGoB,IADH,gBACGA,IADH;AAAA,UACSjB,EADT,gBACSA,EADT;AAAA,UACakB,SADb,gBACaA,SADb;AAAA,UAEGC,OAFH,GAEyBnB,EAFzB,CAEGmB,OAFH;AAAA,UAEYd,QAFZ,GAEyBL,EAFzB,CAEYK,QAFZ;AAGL,UAAMe,YAAY,GAAGH,IAAI,CAACI,MAAL,CAAY,UAAAC,IAAI;AAAA,eAAIjB,QAAQ,CAACE,QAAT,CAAkBe,IAAI,CAACd,EAAvB,CAAJ;AAAA,OAAhB,CAArB,CAHK,CAIL;;AACA,aACI,MAAC,IAAD;AAAM,QAAA,gBAAgB,EAAC,OAAvB;AAA+B,QAAA,UAAU,EAAE,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,GAAD;AAAK,QAAA,QAAQ,EAAC,OAAd;AAAsB,QAAA,KAAK,EAAC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,SAAD;AACI,QAAA,OAAO,EAAE7B,OADb;AAEI,QAAA,IAAI,EAAEsC,IAFV;AAGI,QAAA,EAAE,EAAEjB,EAHR;AAII,QAAA,UAAU,MAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAuBI,MAAC,GAAD;AAAK,QAAA,QAAQ,EAAC,WAAd;AAA0B,QAAA,KAAK,EAAC,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBJ,CADJ;AAyCH;;;sCA1GwB,CAAE;;;;EAVZzB,KAAK,CAACgD,S;;gBAAnBlC,I,eAEiB;AACf4B,EAAAA,IAAI,EAAUrC,SAAS,CAAC4C,KAAV,CAAgBC,UADf;AAEfzB,EAAAA,EAAE,EAAYpB,SAAS,CAAC8C,MAAV,CAAiBD,UAFhB;AAGfP,EAAAA,SAAS,EAAKtC,SAAS,CAAC8C,MAAV,CAAiBD,UAHhB;AAIf3B,EAAAA,UAAU,EAAIlB,SAAS,CAAC+C,IAAV,CAAeF,UAJd;AAKf1B,EAAAA,SAAS,EAAKnB,SAAS,CAAC+C,IAAV,CAAeF;AALd,C;;AAqHvB,SAASG,eAAT,CAAyBC,KAAzB,EAAgC;AAAA,MACtBC,KADsB,GACCD,KADD,CACtBC,KADsB;AAAA,MACfC,WADe,GACCF,KADD,CACfE,WADe;AAE9B,SAAO;AACLd,IAAAA,IAAI,EAAIa,KAAK,CAACE,GAAN,CAAU,MAAV,CADH;AAELhC,IAAAA,EAAE,EAAM8B,KAAK,CAACE,GAAN,CAAU,IAAV,CAFH;AAGLd,IAAAA,SAAS,EAAMa,WAAW,CAACC,GAAZ,CAAgB,IAAhB;AAHV,GAAP;AAKD;;AACD,IAAMC,kBAAkB,GAAG;AACzBnC,EAAAA,UAAU,EAAGrB,YAAY,CAACqB,UADD;AAEzBC,EAAAA,SAAS,EAAItB,YAAY,CAACsB,SAFD;AAGzBmC,EAAAA,gBAAgB,EAAIxD,mBAAmB,CAACqB;AAHf,CAA3B;AAKA,eAAevB,OAAO,CAACoD,eAAD,EAAkBK,kBAAlB,CAAP,CAA6C5C,IAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport coinsActions from '../../Redux/CoinsList/actions'\r\nimport coinsDetailsActions from '../../Redux/CoinDetails/actions'\r\nimport {columns} from './utils'\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'next/link'\r\nimport {starFull} from 'react-icons-kit/icomoon/starFull'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { Tabs, Tab, Spinner} from 'react-bootstrap'\r\nimport {addFavoritList} from '../../helpers/utils'\r\nimport ListTable from '../../Components/ListTable'\r\n\r\nclass List extends React.Component {\r\n\r\n    static propTypes = {\r\n        list        : PropTypes.array.isRequired,\r\n        UI          : PropTypes.object.isRequired,\r\n        detailsUI   : PropTypes.object.isRequired,\r\n        listReload  : PropTypes.func.isRequired,\r\n        uiRefresh   : PropTypes.func.isRequired,\r\n    }\r\n\r\n    static getInitialProps() {}\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('scroll', this.listenToScroll);\r\n        const {listReload, uiRefresh} = this.props;\r\n        let favorits = localStorage.getItem('favorits');\r\n        if(favorits) {\r\n            favorits = JSON.parse(favorits);\r\n        } else {\r\n            favorits = []\r\n        }\r\n        uiRefresh({favorits})\r\n        listReload();\r\n    }\r\n\r\n    listenToScroll = () => {\r\n        if(window.innerHeight + document.documentElement.scrollTop\r\n            === document.documentElement.offsetHeight) {\r\n                this.loadMoreCoins();\r\n        }\r\n      }\r\n\r\n    loadMoreCoins = () => {\r\n        const { listReload, uiRefresh, UI } = this.props;\r\n        const { skip } = UI;\r\n        uiRefresh({\r\n            skip : skip + 1, \r\n        })\r\n        listReload();\r\n    }\r\n    renderValue = (columnItem, listItem, index) => {\r\n        const {UI, uiRefresh} = this.props;\r\n        const { favorits, listReload } = UI;\r\n        let liked = favorits.includes(listItem.id) ? 'active' : 'inactive';\r\n        switch (columnItem.dataIndex) {\r\n            case 'id':\r\n                return index + 1;\r\n            case 'name':\r\n                return <>\r\n                            <div className = {`starList ${liked}`}>\r\n                                <Icon icon={starFull} size={20} onClick={() =>this.addFavoritList(listItem.id)}/>\r\n                            </div>\r\n                            <Link href={`/coins/${listItem.id}`}>\r\n                                <a>\r\n                                    <img src={listItem.icon} className = 'coinIcon'/>\r\n                                    {listItem[columnItem.dataIndex]}\r\n                                </a>\r\n                            </Link>\r\n                        </>\r\n            default : \r\n            return listItem[columnItem.dataIndex]\r\n        }\r\n    }\r\n\r\n    addFavoritList = (id) => {\r\n        const { uiRefresh} = this.props;\r\n        const favorits = addFavoritList(id);\r\n        uiRefresh ({favorits});\r\n    }\r\n\r\n    render() {\r\n        const { list, UI, detailsUI } = this.props;\r\n        const { loading, favorits } = UI;\r\n        const favoritsList = list.filter(item => favorits.includes(item.id));\r\n        // console.log(favoritsList);\r\n        return (\r\n            <Tabs defaultActiveKey=\"Coins\" transition={false}>\r\n                <Tab eventKey=\"Coins\" title=\"Coins\">\r\n                    <ListTable \r\n                        columns={columns}\r\n                        list={list}\r\n                        UI={UI}\r\n                        listReload\r\n                    />\r\n                    {/* <div className='table'>                \r\n                        {columns.map((columnItem, index) => (\r\n                            <div className='cols' key={`${columnItem.key}_${index}`}>\r\n                                <div className='colTitle'>{columnItem.title}</div>\r\n                                <div className = 'rows'>\r\n                                    {list.map((listItem, index) => <div className='rowItem' key={`${listItem.id}_${index}`}>\r\n                                        {this.renderValue(columnItem, listItem, index)}\r\n                                    </div>)}\r\n                                </div>\r\n                            </div>)\r\n                        )}\r\n                        {loading && <Spinner animation=\"border\" variant=\"secondary\" className='spinner'/>}\r\n                        <button onClick={this.loadMoreCoins} className='showMore'>Show More</button>\r\n                    </div> */}\r\n                </Tab>\r\n                <Tab eventKey=\"favorites\" title=\"Favorites\">\r\n                    {/* <div className='table'>                \r\n                        {columns.map(columnItem => (\r\n                            <div className='cols' key={columnItem.key}>\r\n                                <div className='colTitle'>{columnItem.title}</div>\r\n                                <div className = 'rows'>\r\n                                    {favoritsList.map((listItem, index) => <div className='rowItem' key={listItem.id}>\r\n                                        {this.renderValue(columnItem, listItem, index)}\r\n                                    </div>)}\r\n                                </div>\r\n                            </div>)\r\n                        )}\r\n                        {loading && <Spinner animation=\"border\" variant=\"secondary\" className='spinner'/>}\r\n                    </div> */}\r\n                </Tab>\r\n            </Tabs>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { Coins, CoinDetails } = state;\r\n  return {\r\n    list  : Coins.get('list'),\r\n    UI    : Coins.get('UI'),\r\n    detailsUI    : CoinDetails.get('UI'),\r\n  };\r\n}\r\nconst mapDispatchToProps = {\r\n  listReload : coinsActions.listReload,\r\n  uiRefresh  : coinsActions.uiRefresh,\r\n  uiDetailsRefresh  : coinsDetailsActions.uiRefresh,\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);"]},"metadata":{},"sourceType":"module"}