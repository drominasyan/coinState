{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(listReload),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(coinsListSaga);\n\nimport { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\nimport cloneDeep from 'lodash/cloneDeep';\nimport actions from './actions';\nimport { coinsAPI } from '../../helpers/api/coins';\nvar messages = {\n  errorListLoad: 'Loading Coins list failed'\n};\n\nfunction getStoreData(state) {\n  var Coins = state.Coins;\n  var UI = Coins.get('UI');\n  var skip = UI.skip,\n      limit = UI.limit;\n  return {\n    skip: skip,\n    limit: limit\n  };\n}\n\nfunction listReload() {\n  return _regeneratorRuntime.wrap(function listReload$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(actions.COINS_LIST_RELOAD, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var _yield$select, skip, limit, params, res;\n\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return put(actions.uiRefresh({\n                      loading: true\n                    }));\n\n                  case 2:\n                    _context.next = 4;\n                    return select(getStoreData);\n\n                  case 4:\n                    _yield$select = _context.sent;\n                    skip = _yield$select.skip;\n                    limit = _yield$select.limit;\n                    params = {\n                      skip: skip,\n                      limit: limit\n                    };\n                    _context.prev = 8;\n                    _context.next = 11;\n                    return call(coinsAPI.coinsList, params);\n\n                  case 11:\n                    res = _context.sent;\n\n                    if (!(res && res.status === 200)) {\n                      _context.next = 15;\n                      break;\n                    }\n\n                    _context.next = 15;\n                    return put(actions.listRefresh(res.data.coins));\n\n                  case 15:\n                    ;\n                    _context.next = 22;\n                    break;\n\n                  case 18:\n                    _context.prev = 18;\n                    _context.t0 = _context[\"catch\"](8);\n                    alert(messages.errorListLoad, _context.t0);\n                    console.log(_context.t0);\n\n                  case 22:\n                    _context.next = 24;\n                    return put(actions.uiRefresh({\n                      loading: false\n                    }));\n\n                  case 24:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[8, 18]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function coinsListSaga() {\n  return _regeneratorRuntime.wrap(function coinsListSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(listReload)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/coinState/Coins/Redux/Coins/saga.js"],"names":["listReload","coinsListSaga","all","takeEvery","put","fork","call","select","cloneDeep","actions","coinsAPI","messages","errorListLoad","getStoreData","state","Coins","UI","get","skip","limit","COINS_LIST_RELOAD","uiRefresh","loading","params","coinsList","res","status","listRefresh","data","coins","alert","console","log"],"mappings":";;oDAqBUA,U;qDAuBeC,a;;AA5CzB,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,MAA1C,QAAwD,oBAAxD;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,SAASC,QAAT,QAAyB,yBAAzB;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,aAAa,EAAG;AADD,CAAjB;;AAIA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,MACnBC,KADmB,GACTD,KADS,CACnBC,KADmB;AAE3B,MAAMC,EAAE,GAAGD,KAAK,CAACE,GAAN,CAAU,IAAV,CAAX;AAF2B,MAGnBC,IAHmB,GAGHF,EAHG,CAGnBE,IAHmB;AAAA,MAGbC,KAHa,GAGHH,EAHG,CAGbG,KAHa;AAK3B,SAAO;AACLD,IAAAA,IAAI,EAAJA,IADK;AAELC,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;;AAED,SAAUnB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,SAAS,CAACM,OAAO,CAACW,iBAAT,wCAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACzC,2BAAMhB,GAAG,CAACK,OAAO,CAACY,SAAR,CAAkB;AAAEC,sBAAAA,OAAO,EAAE;AAAX,qBAAlB,CAAD,CAAT;;AADyC;AAAA;AAEjB,2BAAMf,MAAM,CAACM,YAAD,CAAZ;;AAFiB;AAAA;AAEjCK,oBAAAA,IAFiC,iBAEjCA,IAFiC;AAE3BC,oBAAAA,KAF2B,iBAE3BA,KAF2B;AAGnCI,oBAAAA,MAHmC,GAG1B;AACbL,sBAAAA,IAAI,EAAJA,IADa;AAEbC,sBAAAA,KAAK,EAALA;AAFa,qBAH0B;AAAA;AAAA;AAS3B,2BAAMb,IAAI,CAACI,QAAQ,CAACc,SAAV,EAAqBD,MAArB,CAAV;;AAT2B;AASjCE,oBAAAA,GATiC;;AAAA,0BAUnCA,GAAG,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAVa;AAAA;AAAA;AAAA;;AAAA;AAWrC,2BAAMtB,GAAG,CAACK,OAAO,CAACkB,WAAR,CAAoBF,GAAG,CAACG,IAAJ,CAASC,KAA7B,CAAD,CAAT;;AAXqC;AAYtC;AAZsC;AAAA;;AAAA;AAAA;AAAA;AAcvCC,oBAAAA,KAAK,CAACnB,QAAQ,CAACC,aAAV,cAAL;AACAmB,oBAAAA,OAAO,CAACC,GAAR;;AAfuC;AAAA;AAkBzC,2BAAM5B,GAAG,CAACK,OAAO,CAACY,SAAR,CAAkB;AAAEC,sBAAAA,OAAO,EAAE;AAAX,qBAAlB,CAAD,CAAT;;AAlByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA5B,EAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,eAAe,SAAUrB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACG,IAAI,CAACL,UAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport actions from './actions';\r\n\r\nimport { coinsAPI } from '../../helpers/api/coins';\r\n\r\nconst messages = {\r\n  errorListLoad : 'Loading Coins list failed',\r\n};\r\n\r\nfunction getStoreData(state) {\r\n  const { Coins } = state;\r\n  const UI = Coins.get('UI');\r\n  const { skip, limit } = UI;\r\n\r\n  return {\r\n    skip,\r\n    limit,\r\n  };\r\n}\r\n\r\nfunction* listReload() {\r\n  yield takeEvery(actions.COINS_LIST_RELOAD, function* () {\r\n    yield put(actions.uiRefresh({ loading: true }));\r\n    const { skip, limit } = yield select(getStoreData);\r\n    const params = {\r\n      skip,\r\n      limit,\r\n    }\r\n\r\n    try {\r\n      const res = yield call(coinsAPI.coinsList, params);\r\n      if (res && res.status === 200) {\r\n        yield put(actions.listRefresh(res.data.coins));\r\n      };\r\n    } catch (error) {\r\n      alert(messages.errorListLoad, error);\r\n      console.log(error);\r\n    }\r\n\r\n    yield put(actions.uiRefresh({ loading: false }));\r\n  });\r\n}\r\n\r\nexport default function* coinsListSaga() {\r\n  yield all([fork(listReload)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}