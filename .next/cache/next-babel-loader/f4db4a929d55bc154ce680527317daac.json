{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\coinState\\\\Coins\\\\containers\\\\Coins\\\\List.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport coinsActions from '../../Redux/CoinsList/actions';\nimport coinsDetailsActions from '../../Redux/CoinDetails/actions';\nimport { columns } from './utils';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { starFull } from 'react-icons-kit/icomoon/starFull';\nimport { Icon } from 'react-icons-kit';\nimport { Tabs, Tab, Spinner } from 'react-bootstrap';\n\nclass List extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"listenToScroll\", () => {\n      if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n        this.loadMoreCoins();\n      }\n    });\n\n    _defineProperty(this, \"loadMoreCoins\", () => {\n      const {\n        listReload,\n        uiRefresh,\n        UI\n      } = this.props;\n      const {\n        skip\n      } = UI;\n      uiRefresh({\n        skip: skip + 1\n      });\n      listReload();\n    });\n\n    _defineProperty(this, \"renderValue\", (columnItem, listItem, index) => {\n      switch (columnItem.dataIndex) {\n        case 'id':\n          return index + 1;\n\n        case 'name':\n          return __jsx(Link, {\n            href: `/coins/${listItem.id}`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 24\n            }\n          }, __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }\n          }, __jsx(\"img\", {\n            src: listItem.icon,\n            className: \"coinIcon\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 25\n            }\n          }), listItem[columnItem.dataIndex]));\n\n        default:\n          return listItem[columnItem.dataIndex];\n      }\n    });\n\n    _defineProperty(this, \"addFavoritList\", () => {\n      const {\n        id,\n        uiDetailsRefresh\n      } = this.props;\n      const favorits = addFavoritList(id);\n      uiDetailsRefresh({\n        favorits\n      });\n    });\n  }\n\n  static getInitialProps() {}\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.listenToScroll);\n    const {\n      listReload,\n      uiRefresh\n    } = this.props;\n    let favorits = localStorage.getItem('favorits');\n\n    if (favorits) {\n      favorits = JSON.parse(favorits);\n    } else {\n      favorits = [];\n    }\n\n    uiRefresh({\n      favorits\n    });\n    listReload();\n  }\n\n  render() {\n    const {\n      list,\n      UI,\n      detailsUI\n    } = this.props;\n    const {\n      loading,\n      favorits\n    } = UI;\n    const liked = true; // let liked = favorits.includes(id) ? 'active' : 'inactive';\n    // const favoritsList = list.filter(item => favorits.includes(item.id))\n\n    return __jsx(Tabs, {\n      defaultActiveKey: \"Coins\",\n      transition: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, __jsx(Tab, {\n      eventKey: \"Coins\",\n      title: \"Coins\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, columns.map(columnItem => __jsx(\"div\", {\n      className: \"cols\",\n      key: columnItem.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      className: \"colTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 33\n      }\n    }, columnItem.title), __jsx(\"div\", {\n      className: \"rows\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 33\n      }\n    }, list.map((listItem, index) => __jsx(\"div\", {\n      className: \"rowItem\",\n      key: listItem.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 68\n      }\n    }, this.renderValue(columnItem, listItem, index)))))), loading && __jsx(Spinner, {\n      animation: \"border\",\n      variant: \"secondary\",\n      className: \"spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 37\n      }\n    }), __jsx(\"button\", {\n      onClick: this.loadMoreCoins,\n      className: \"showMore\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, \"Show More\"))), __jsx(Tab, {\n      eventKey: \"favorites\",\n      title: \"Favorites\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, columns.map(columnItem => __jsx(\"div\", {\n      className: \"cols\",\n      key: columnItem.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      className: \"colTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 33\n      }\n    }, columnItem.title), __jsx(\"div\", {\n      className: \"rows\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }\n    }, favoritsList.map((listItem, index) => __jsx(\"div\", {\n      className: \"rowItem\",\n      key: listItem.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 76\n      }\n    }, this.renderValue(columnItem, listItem, index), __jsx(\"div\", {\n      className: `star ${liked}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 41\n      }\n    }, __jsx(Icon, {\n      icon: starFull,\n      size: 64,\n      onClick: this.addFavoritList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 45\n      }\n    }))))))), loading && __jsx(Spinner, {\n      animation: \"border\",\n      variant: \"secondary\",\n      className: \"spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 37\n      }\n    }))));\n  }\n\n}\n\n_defineProperty(List, \"propTypes\", {\n  list: PropTypes.array.isRequired,\n  UI: PropTypes.object.isRequired,\n  detailsUI: PropTypes.object.isRequired,\n  listReload: PropTypes.func.isRequired,\n  uiRefresh: PropTypes.func.isRequired,\n  uiDetailsRefresh: PropTypes.func.isRequired\n});\n\nfunction mapStateToProps(state) {\n  const {\n    Coins,\n    CoinDetails\n  } = state;\n  return {\n    list: Coins.get('list'),\n    UI: Coins.get('UI'),\n    detailsUI: CoinDetails.get('UI')\n  };\n}\n\nconst mapDispatchToProps = {\n  listReload: coinsActions.listReload,\n  uiRefresh: coinsActions.uiRefresh,\n  uiDetailsRefresh: coinsDetailsActions.uiRefresh\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/coinState/Coins/containers/Coins/List.js"],"names":["React","connect","coinsActions","coinsDetailsActions","columns","PropTypes","Link","starFull","Icon","Tabs","Tab","Spinner","List","Component","window","innerHeight","document","documentElement","scrollTop","offsetHeight","loadMoreCoins","listReload","uiRefresh","UI","props","skip","columnItem","listItem","index","dataIndex","id","icon","uiDetailsRefresh","favorits","addFavoritList","getInitialProps","componentDidMount","addEventListener","listenToScroll","localStorage","getItem","JSON","parse","render","list","detailsUI","loading","liked","map","key","title","renderValue","favoritsList","array","isRequired","object","func","mapStateToProps","state","Coins","CoinDetails","get","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport coinsActions from '../../Redux/CoinsList/actions'\r\nimport coinsDetailsActions from '../../Redux/CoinDetails/actions'\r\nimport {columns} from './utils'\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'next/link'\r\nimport {starFull} from 'react-icons-kit/icomoon/starFull'\r\nimport { Icon } from 'react-icons-kit'\r\nimport { Tabs, Tab, Spinner} from 'react-bootstrap'\r\nclass List extends React.Component {\r\n\r\n    static propTypes = {\r\n        list        : PropTypes.array.isRequired,\r\n        UI          : PropTypes.object.isRequired,\r\n        detailsUI   : PropTypes.object.isRequired,\r\n        listReload  : PropTypes.func.isRequired,\r\n        uiRefresh   : PropTypes.func.isRequired,\r\n        uiDetailsRefresh : PropTypes.func.isRequired,\r\n    }\r\n\r\n    static getInitialProps() {}\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('scroll', this.listenToScroll);\r\n        const {listReload, uiRefresh} = this.props;\r\n        let favorits = localStorage.getItem('favorits');\r\n        if(favorits) {\r\n            favorits = JSON.parse(favorits);\r\n        } else {\r\n            favorits = []\r\n        }\r\n        uiRefresh({favorits})\r\n        listReload();\r\n    }\r\n\r\n    listenToScroll = () => {\r\n        if(window.innerHeight + document.documentElement.scrollTop\r\n            === document.documentElement.offsetHeight) {\r\n                this.loadMoreCoins();\r\n        }\r\n      }\r\n\r\n    loadMoreCoins = () => {\r\n        const { listReload, uiRefresh, UI } = this.props;\r\n        const { skip } = UI;\r\n        uiRefresh({\r\n            skip : skip + 1, \r\n        })\r\n        listReload();\r\n    }\r\n    renderValue = (columnItem, listItem, index) => {\r\n        switch (columnItem.dataIndex) {\r\n            case 'id':\r\n                return index + 1;\r\n            case 'name':\r\n                return <Link href={`/coins/${listItem.id}`}>\r\n                    <a>\r\n                        <img src={listItem.icon} className = 'coinIcon'/>\r\n                        {listItem[columnItem.dataIndex]}</a>\r\n                    </Link>\r\n                    \r\n            default : \r\n            return listItem[columnItem.dataIndex]\r\n        }\r\n    }\r\n\r\n    addFavoritList = () => {\r\n        const { id, uiDetailsRefresh} = this.props;\r\n        const favorits = addFavoritList(id);\r\n        uiDetailsRefresh ({favorits});\r\n    }\r\n\r\n    render() {\r\n        const { list, UI, detailsUI } = this.props;\r\n        const { loading, favorits } = UI;\r\n        const liked = true\r\n        // let liked = favorits.includes(id) ? 'active' : 'inactive';\r\n        // const favoritsList = list.filter(item => favorits.includes(item.id))\r\n        return (\r\n            <Tabs defaultActiveKey=\"Coins\" transition={false}>\r\n                <Tab eventKey=\"Coins\" title=\"Coins\">\r\n                    <div className='table'>                \r\n                        {columns.map(columnItem => (\r\n                            <div className='cols' key={columnItem.key}>\r\n                                <div className='colTitle'>{columnItem.title}</div>\r\n                                <div className = 'rows'>\r\n                                    {list.map((listItem, index) => <div className='rowItem' key={listItem.id}>\r\n                                        {this.renderValue(columnItem, listItem, index)}\r\n                                    </div>)}\r\n                                </div>\r\n                            </div>)\r\n                        )}\r\n                        {loading && <Spinner animation=\"border\" variant=\"secondary\" className='spinner'/>}\r\n                        <button onClick={this.loadMoreCoins} className='showMore'>Show More</button>\r\n                    </div>\r\n                </Tab>\r\n                <Tab eventKey=\"favorites\" title=\"Favorites\">\r\n                <div className='table'>                \r\n                        {columns.map(columnItem => (\r\n                            <div className='cols' key={columnItem.key}>\r\n                                <div className='colTitle'>{columnItem.title}</div>\r\n                                <div className = 'rows'>\r\n                                    {favoritsList.map((listItem, index) => <div className='rowItem' key={listItem.id}>\r\n                                        {this.renderValue(columnItem, listItem, index)}\r\n                                        <div className = {`star ${liked}`}>\r\n                                            <Icon icon={starFull} size={64} onClick={this.addFavoritList}/>\r\n                                        </div>\r\n                                    </div>)}\r\n                                </div>\r\n                            </div>)\r\n                        )}\r\n                        {loading && <Spinner animation=\"border\" variant=\"secondary\" className='spinner'/>}\r\n                    </div>\r\n                </Tab>\r\n            </Tabs>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { Coins, CoinDetails } = state;\r\n  return {\r\n    list  : Coins.get('list'),\r\n    UI    : Coins.get('UI'),\r\n    detailsUI    : CoinDetails.get('UI'),\r\n  };\r\n}\r\nconst mapDispatchToProps = {\r\n  listReload : coinsActions.listReload,\r\n  uiRefresh  : coinsActions.uiRefresh,\r\n  uiDetailsRefresh  : coinsDetailsActions.uiRefresh,\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);"]},"metadata":{},"sourceType":"module"}