{"ast":null,"code":"import { toInteger, keys, cloneDeep, isArray, isEmpty } from 'lodash'; // check if value is ID: integer number > 0\n\nexport function isID(value) {\n  return Boolean(toInteger(value));\n} // filling object\n\nexport function fill(source, target) {\n  var withCreatingKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var sourceKeys = keys(source);\n  var targetKeys = keys(target);\n  var result = cloneDeep(target);\n  sourceKeys.forEach(function (key) {\n    if (!targetKeys.includes(key) && !withCreatingKeys) {\n      return;\n    }\n\n    result[key] = source[key];\n  });\n  return result;\n} // list convert to entities\n\nexport function listToEntities() {\n  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var nameKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n\n  if (!isArray(list) || isEmpty(list)) {\n    return {};\n  }\n\n  var result = {};\n  list.forEach(function (item) {\n    var keyValue = item[nameKey];\n\n    if (!keyValue) {\n      return;\n    }\n\n    result[keyValue] = cloneDeep(item);\n  });\n  return result;\n}\nexport var addFavoritList = function addFavoritList(id) {\n  var favorits = localStorage.getItem('favorits') || [];\n\n  if (favorits) {\n    favorits = jso;\n  }\n\n  var haveFavorits = favorits.includes(id);\n  debugger;\n\n  if (haveFavorits) {\n    favorits = favorits.filter(function (item) {\n      return item !== id;\n    });\n  } else {\n    favorits.push(id);\n  }\n\n  localStorage.setItem('favorits', JSON.stringify(favorits));\n};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/coinState/Coins/helpers/utils.js"],"names":["toInteger","keys","cloneDeep","isArray","isEmpty","isID","value","Boolean","fill","source","target","withCreatingKeys","sourceKeys","targetKeys","result","forEach","key","includes","listToEntities","list","nameKey","item","keyValue","addFavoritList","id","favorits","localStorage","getItem","jso","haveFavorits","filter","push","setItem","JSON","stringify"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,OAA9C,QAA6D,QAA7D,C,CAEA;;AACA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAC1B,SAAOC,OAAO,CAACP,SAAS,CAACM,KAAD,CAAV,CAAd;AACD,C,CAED;;AACA,OAAO,SAASE,IAAT,CAAcC,MAAd,EAAsBC,MAAtB,EAAwD;AAAA,MAA1BC,gBAA0B,uEAAP,KAAO;AAE7D,MAAMC,UAAU,GAAGX,IAAI,CAACQ,MAAD,CAAvB;AACA,MAAMI,UAAU,GAAGZ,IAAI,CAACS,MAAD,CAAvB;AACA,MAAMI,MAAM,GAAGZ,SAAS,CAACQ,MAAD,CAAxB;AACAE,EAAAA,UAAU,CAACG,OAAX,CAAmB,UAAAC,GAAG,EAAI;AACxB,QAAI,CAACH,UAAU,CAACI,QAAX,CAAoBD,GAApB,CAAD,IAA6B,CAACL,gBAAlC,EAAoD;AAClD;AACD;;AACDG,IAAAA,MAAM,CAACE,GAAD,CAAN,GAAcP,MAAM,CAACO,GAAD,CAApB;AACD,GALD;AAMA,SAAOF,MAAP;AACD,C,CAED;;AACA,OAAO,SAASI,cAAT,GAAmD;AAAA,MAA3BC,IAA2B,uEAApB,EAAoB;AAAA,MAAhBC,OAAgB,uEAAN,IAAM;;AACxD,MAAI,CAACjB,OAAO,CAACgB,IAAD,CAAR,IAAkBf,OAAO,CAACe,IAAD,CAA7B,EAAqC;AACnC,WAAO,EAAP;AACD;;AAED,MAAML,MAAM,GAAG,EAAf;AAEAK,EAAAA,IAAI,CAACJ,OAAL,CAAa,UAAAM,IAAI,EAAI;AACnB,QAAMC,QAAQ,GAAGD,IAAI,CAACD,OAAD,CAArB;;AACA,QAAI,CAACE,QAAL,EAAe;AACb;AACD;;AAEDR,IAAAA,MAAM,CAACQ,QAAD,CAAN,GAAmBpB,SAAS,CAACmB,IAAD,CAA5B;AACD,GAPD;AASA,SAAOP,MAAP;AACD;AAED,OAAO,IAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAACC,EAAD,EAAQ;AACpC,MAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,KAAoC,EAAnD;;AACA,MAAGF,QAAH,EAAa;AACXA,IAAAA,QAAQ,GAAGG,GAAX;AACD;;AACD,MAAMC,YAAY,GAAGJ,QAAQ,CAACR,QAAT,CAAkBO,EAAlB,CAArB;AACA;;AACA,MAAIK,YAAJ,EAAkB;AAChBJ,IAAAA,QAAQ,GAAGA,QAAQ,CAACK,MAAT,CAAgB,UAAAT,IAAI;AAAA,aAAIA,IAAI,KAAKG,EAAb;AAAA,KAApB,CAAX;AACD,GAFD,MAEO;AACLC,IAAAA,QAAQ,CAACM,IAAT,CAAcP,EAAd;AACD;;AACDE,EAAAA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeT,QAAf,CAAjC;AACD,CAbM","sourcesContent":["import { toInteger, keys, cloneDeep, isArray, isEmpty } from 'lodash';\r\n\r\n// check if value is ID: integer number > 0\r\nexport function isID(value) {\r\n  return Boolean(toInteger(value));\r\n}\r\n\r\n// filling object\r\nexport function fill(source, target, withCreatingKeys = false) {\r\n\r\n  const sourceKeys = keys(source);\r\n  const targetKeys = keys(target);\r\n  const result = cloneDeep(target);\r\n  sourceKeys.forEach(key => {\r\n    if (!targetKeys.includes(key) && !withCreatingKeys) {\r\n      return;\r\n    }\r\n    result[key] = source[key];\r\n  });\r\n  return result;\r\n}\r\n\r\n// list convert to entities\r\nexport function listToEntities(list = [], nameKey = 'id') {\r\n  if (!isArray(list) || isEmpty(list)) {\r\n    return {};\r\n  }\r\n\r\n  const result = {};\r\n\r\n  list.forEach(item => {\r\n    const keyValue = item[nameKey];\r\n    if (!keyValue) {\r\n      return;\r\n    }\r\n\r\n    result[keyValue] = cloneDeep(item);\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nexport const addFavoritList = (id) => {\r\n  let favorits = localStorage.getItem('favorits') || [];\r\n  if(favorits) {\r\n    favorits = jso\r\n  }\r\n  const haveFavorits = favorits.includes(id);\r\n  debugger  \r\n  if (haveFavorits) {\r\n    favorits = favorits.filter(item => item !== id);\r\n  } else {\r\n    favorits.push(id)\r\n  }\r\n  localStorage.setItem('favorits', JSON.stringify(favorits))\r\n}"]},"metadata":{},"sourceType":"module"}