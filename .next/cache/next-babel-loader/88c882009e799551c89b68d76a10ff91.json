{"ast":null,"code":"import { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\nimport cloneDeep from 'lodash/cloneDeep';\nimport actions from './actions';\nimport { coinsAPI } from '../../helpers/api/coins';\nconst messages = {\n  errorListLoad: 'Loading Coins list failed'\n};\n\nfunction getStoreData(state) {\n  const {\n    Coins\n  } = state;\n  const UI = Coins.get('UI');\n  const {\n    skip,\n    limit\n  } = UI;\n  return {\n    skip,\n    limit\n  };\n}\n\nfunction* listReload() {\n  yield takeEvery(actions.COINS_LIST_RELOAD, function* () {\n    yield put(actions.uiRefresh({\n      loading: true\n    }));\n    const {\n      skip,\n      limit\n    } = yield select(getStoreData);\n    const params = {\n      skip,\n      limit\n    };\n\n    try {\n      const res = yield call(coinsAPI.coinsList, params);\n\n      if (res && res.status === 200) {\n        yield put(actions.listRefresh(res.data.coins));\n      }\n\n      ;\n    } catch (error) {\n      alert(messages.errorListLoad, error);\n      console.log(error);\n    }\n\n    yield put(actions.uiRefresh({\n      loading: false\n    }));\n  });\n}\n\nexport default function* coinsListSaga() {\n  yield all([fork(listReload)]);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/coinState/Coins/Redux/CoinsList/saga.js"],"names":["all","takeEvery","put","fork","call","select","cloneDeep","actions","coinsAPI","messages","errorListLoad","getStoreData","state","Coins","UI","get","skip","limit","listReload","COINS_LIST_RELOAD","uiRefresh","loading","params","res","coinsList","status","listRefresh","data","coins","error","alert","console","log","coinsListSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,MAA1C,QAAwD,oBAAxD;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,SAASC,QAAT,QAAyB,yBAAzB;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,aAAa,EAAG;AADD,CAAjB;;AAIA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AACA,QAAME,EAAE,GAAGD,KAAK,CAACE,GAAN,CAAU,IAAV,CAAX;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBH,EAAxB;AAEA,SAAO;AACLE,IAAAA,IADK;AAELC,IAAAA;AAFK,GAAP;AAID;;AAED,UAAUC,UAAV,GAAuB;AACrB,QAAMjB,SAAS,CAACM,OAAO,CAACY,iBAAT,EAA4B,aAAa;AACtD,UAAMjB,GAAG,CAACK,OAAO,CAACa,SAAR,CAAkB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAlB,CAAD,CAAT;AACA,UAAM;AAAEL,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkB,MAAMZ,MAAM,CAACM,YAAD,CAApC;AACA,UAAMW,MAAM,GAAG;AACbN,MAAAA,IADa;AAEbC,MAAAA;AAFa,KAAf;;AAKA,QAAI;AACF,YAAMM,GAAG,GAAG,MAAMnB,IAAI,CAACI,QAAQ,CAACgB,SAAV,EAAqBF,MAArB,CAAtB;;AACA,UAAIC,GAAG,IAAIA,GAAG,CAACE,MAAJ,KAAe,GAA1B,EAA+B;AAC7B,cAAMvB,GAAG,CAACK,OAAO,CAACmB,WAAR,CAAoBH,GAAG,CAACI,IAAJ,CAASC,KAA7B,CAAD,CAAT;AACD;;AAAA;AACF,KALD,CAKE,OAAOC,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACrB,QAAQ,CAACC,aAAV,EAAyBmB,KAAzB,CAAL;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD;;AAED,UAAM3B,GAAG,CAACK,OAAO,CAACa,SAAR,CAAkB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAlB,CAAD,CAAT;AACD,GAnBc,CAAf;AAoBD;;AAED,eAAe,UAAUY,aAAV,GAA0B;AACvC,QAAMjC,GAAG,CAAC,CAACG,IAAI,CAACe,UAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, takeEvery, put, fork, call, select } from 'redux-saga/effects';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport actions from './actions';\r\n\r\nimport { coinsAPI } from '../../helpers/api/coins';\r\n\r\nconst messages = {\r\n  errorListLoad : 'Loading Coins list failed',\r\n};\r\n\r\nfunction getStoreData(state) {\r\n  const { Coins } = state;\r\n  const UI = Coins.get('UI');\r\n  const { skip, limit } = UI;\r\n\r\n  return {\r\n    skip,\r\n    limit,\r\n  };\r\n}\r\n\r\nfunction* listReload() {\r\n  yield takeEvery(actions.COINS_LIST_RELOAD, function* () {\r\n    yield put(actions.uiRefresh({ loading: true }));\r\n    const { skip, limit } = yield select(getStoreData);\r\n    const params = {\r\n      skip,\r\n      limit,\r\n    }\r\n\r\n    try {\r\n      const res = yield call(coinsAPI.coinsList, params);\r\n      if (res && res.status === 200) {\r\n        yield put(actions.listRefresh(res.data.coins));\r\n      };\r\n    } catch (error) {\r\n      alert(messages.errorListLoad, error);\r\n      console.log(error);\r\n    }\r\n\r\n    yield put(actions.uiRefresh({ loading: false }));\r\n  });\r\n}\r\n\r\nexport default function* coinsListSaga() {\r\n  yield all([fork(listReload)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}