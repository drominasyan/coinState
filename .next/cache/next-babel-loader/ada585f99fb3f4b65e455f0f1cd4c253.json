{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\coinState\\\\Coins\\\\containers\\\\Coins\\\\List.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport coinsActions from '../../Redux/Coins/actions';\nimport { columns } from './utils';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { Container, Tabs, Tab, Spinner } from 'react-bootstrap';\nimport { Icon } from 'antd';\n\nclass List extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"listenToScroll\", () => {\n      const winScroll = document.body.scrollTop || document; // const height =\n      //   document.documentElement.scrollHeight -\n      //   document.documentElement.clientHeight\n\n      if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n        this.loadMoreCoins;\n      }\n\n      const scrolled = winScroll / height;\n      debugger; // this.setState({\n      //   theposition: scrolled,\n      // })\n    });\n\n    _defineProperty(this, \"loadMoreCoins\", () => {\n      const {\n        listReload,\n        uiRefresh,\n        UI\n      } = this.props;\n      const {\n        skip\n      } = UI;\n      uiRefresh({\n        skip: skip + 1\n      });\n      listReload();\n    });\n  }\n\n  static getInitialProps() {}\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.listenToScroll);\n    const {\n      listReload\n    } = this.props;\n    listReload();\n  }\n\n  render() {\n    const {\n      list,\n      UI\n    } = this.props;\n    const {\n      loading\n    } = UI;\n\n    const renderValue = (columnItem, listItem, index) => {\n      switch (columnItem.dataIndex) {\n        case 'id':\n          return index + 1;\n\n        case 'name':\n          return __jsx(Link, {\n            href: `/coins/${listItem.id}`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 24\n            }\n          }, __jsx(\"a\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 21\n            }\n          }, __jsx(\"img\", {\n            src: listItem.icon,\n            className: \"coinIcon\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }\n          }), listItem[columnItem.dataIndex]));\n\n        default:\n          return listItem[columnItem.dataIndex];\n      }\n    };\n\n    return __jsx(Tabs, {\n      defaultActiveKey: \"Coins\",\n      transition: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, __jsx(Tab, {\n      eventKey: \"Coins\",\n      title: \"Coins\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, columns.map(columnItem => __jsx(\"div\", {\n      className: \"cols\",\n      key: columnItem.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      className: \"colTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }, columnItem.title), __jsx(\"div\", {\n      className: \"rows\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, list.map((listItem, index) => __jsx(\"div\", {\n      className: \"rowItem\",\n      key: listItem.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 68\n      }\n    }, renderValue(columnItem, listItem, index)))))), loading && __jsx(Spinner, {\n      animation: \"border\",\n      variant: \"secondary\",\n      className: \"spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 37\n      }\n    }), __jsx(\"button\", {\n      onClick: this.loadMoreCoins,\n      className: \"showMore\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }, \"Show More\"))), __jsx(Tab, {\n      eventKey: \"profile\",\n      title: \"Profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\n_defineProperty(List, \"propTypes\", {\n  list: PropTypes.array.isRequired,\n  UI: PropTypes.object.isRequired,\n  listReload: PropTypes.func.isRequired,\n  uiRefresh: PropTypes.func.isRequired\n});\n\nfunction mapStateToProps(state) {\n  return {\n    list: state.Coins.get('list'),\n    UI: state.Coins.get('UI')\n  };\n}\n\nconst mapDispatchToProps = {\n  listReload: coinsActions.listReload,\n  uiRefresh: coinsActions.uiRefresh\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/coinState/Coins/containers/Coins/List.js"],"names":["React","connect","coinsActions","columns","PropTypes","Link","Container","Tabs","Tab","Spinner","Icon","List","Component","winScroll","document","body","scrollTop","window","innerHeight","documentElement","offsetHeight","loadMoreCoins","scrolled","height","listReload","uiRefresh","UI","props","skip","getInitialProps","componentDidMount","addEventListener","listenToScroll","render","list","loading","renderValue","columnItem","listItem","index","dataIndex","id","icon","map","key","title","array","isRequired","object","func","mapStateToProps","state","Coins","get","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport coinsActions from '../../Redux/Coins/actions'\r\nimport {columns} from './utils'\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'next/link'\r\nimport {Container, Tabs, Tab, Spinner} from 'react-bootstrap'\r\nimport { Icon } from 'antd';\r\nclass List extends React.Component {\r\n\r\n    static propTypes = {\r\n        list        : PropTypes.array.isRequired,\r\n        UI          : PropTypes.object.isRequired,\r\n        listReload  : PropTypes.func.isRequired,\r\n        uiRefresh   : PropTypes.func.isRequired,\r\n    }\r\n\r\n    static getInitialProps() {}\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('scroll', this.listenToScroll);\r\n        const {listReload} = this.props;\r\n        listReload();\r\n    }\r\n\r\n    listenToScroll = () => {\r\n        const winScroll = document.body.scrollTop || document;\r\n      \r\n        // const height =\r\n        //   document.documentElement.scrollHeight -\r\n        //   document.documentElement.clientHeight\r\n          if(window.innerHeight + document.documentElement.scrollTop\r\n            === document.documentElement.offsetHeight) {\r\n                this.loadMoreCoins\r\n            }\r\n      \r\n        const scrolled = winScroll / height\r\n        debugger\r\n        // this.setState({\r\n        //   theposition: scrolled,\r\n        // })\r\n      }\r\n\r\n    loadMoreCoins = () => {\r\n        const { listReload, uiRefresh, UI } = this.props;\r\n        const { skip } = UI;\r\n        uiRefresh({\r\n            skip : skip + 1, \r\n        })\r\n        listReload();\r\n    }\r\n\r\n    render() {\r\n        const { list, UI } = this.props;\r\n        const { loading } = UI;\r\n        const renderValue = (columnItem, listItem, index) => {\r\n            switch (columnItem.dataIndex) {\r\n            case 'id':\r\n                return index + 1;\r\n            case 'name':\r\n                return <Link href={`/coins/${listItem.id}`}>\r\n                    <a>\r\n                        <img src={listItem.icon} className = 'coinIcon'/>\r\n                        {listItem[columnItem.dataIndex]}</a>\r\n                    </Link>\r\n                    \r\n            default : \r\n                return listItem[columnItem.dataIndex]\r\n        }\r\n        }\r\n        return (\r\n            <Tabs defaultActiveKey=\"Coins\" transition={false}>\r\n                <Tab eventKey=\"Coins\" title=\"Coins\">\r\n                    <div className='table'>                \r\n                        {columns.map(columnItem => (\r\n                            <div className='cols' key={columnItem.key}>\r\n                                <div className='colTitle'>{columnItem.title}</div>\r\n                                <div className = 'rows'>\r\n                                    {list.map((listItem, index) => <div className='rowItem' key={listItem.id}>\r\n                                        {renderValue(columnItem, listItem, index)}\r\n                                    </div>)}\r\n                                </div>\r\n                            </div>)\r\n                        )}\r\n                        {loading && <Spinner animation=\"border\" variant=\"secondary\" className='spinner'/>}\r\n                        <button onClick={this.loadMoreCoins} className='showMore'>Show More</button>\r\n                    </div>\r\n                </Tab>\r\n                <Tab eventKey=\"profile\" title=\"Profile\">\r\n                    {/* <Sonnet /> */}\r\n                </Tab>\r\n            </Tabs>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  \r\n  return {\r\n    list    : state.Coins.get('list'),\r\n    UI : state.Coins.get('UI')\r\n  };\r\n}\r\nconst mapDispatchToProps = {\r\n  listReload : coinsActions.listReload,\r\n  uiRefresh  : coinsActions.uiRefresh,\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);"]},"metadata":{},"sourceType":"module"}